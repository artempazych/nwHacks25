import os
import time
from openai import OpenAI


class OpenAIProvider:
    def __init__(self, api_key):
        self.client = OpenAI(api_key=api_key)

    def generate_script(self, prompt: str) -> str:
        """
        Calls OpenAI to generate an educational script explaining the topic.
        """
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a teacher."},
                {
                    "role": "user",
                    "content": f"Create an educational video script with an intuitive explainanation and your answer will be fed to an agent that generates manim script: {prompt}.",
                },
            ],
            temperature=0.7,
            max_tokens=15000,
        )
        return response.choices[0].message.content.strip()

    def generate_manim_code(self, script: str) -> str:
        """
        Calls OpenAI to generate Manim code from the script.
        """
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "You are a expert at manim the python package.",
                },
                {
                    "role": "user",
                    "content": f"Generate Manim code that will create a short video explaining the concepts for the following script BUT VERY IMPORTANT YOU DONT OUTPUT ANYTHING ELSE OTHER THAN THE PYTHON CODE you response will be copied by a python engine and run ALSO DONY USE anything like SVGMobject or any sort of files OR ANY EXTERNAL RESOURCES like musics or image files SHOULD *NOT* BE USED: {script}",
                },
            ],
            temperature=0.7,
            max_tokens=15000,
        )
        return response.choices[0].message.content.strip()

    def generate_voice_over_script(self, code: str) -> None:
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a teacher."},
                {
                    "role": "user",
                    "content": f"Create a script for person to do a voice over for the video that gets generated by this code: {code}. The script should not contain any information except what a person should be actually reading.",
                },
            ],
            temperature=0.7,
            max_tokens=15000,
        )
        return response.choices[0].message.content.strip()

    def generate_voice_over(self, script: str) -> None:
        timestamp = int(time.time())
        voiceovers_folder = "videos/voiceovers"

        if not os.path.exists(voiceovers_folder):
            os.makedirs(voiceovers_folder)

        speech_file_path = f"{voiceovers_folder}/voice_{timestamp}.mp3"
        response = self.client.audio.speech.create(
            model="tts-1",
            voice="alloy",
            input=script,
        )
        response.stream_to_file(speech_file_path)

        return speech_file_path
